#if not defined INPUT_HPP
#define INPUT_HPP

#include "froch.hpp"

namespace fro
{
	enum class MouseButton
	{
		UNKNOWN,

		RIGHT,
		MIDDLE,
		LEFT
	};

	enum class Key
	{
		UNKNOWN,

		RETURN = '\r',
		ESCAPE = '\x1B',
		BACKSPACE = '\b',
		TAB = '\t',
		SPACE = ' ',
		EXCLAMATION_MARK = '!',
		DOUBLE_QUOTE = '"',
		HASH = '#',
		PERCENT = '%',
		DOLLAR = '$',
		AMPERSAND = '&',
		QUOTE = '\'',
		LEFT_PARENTHESIS = '(',
		RIGHT_PARENTHESIS = ')',
		ASTERISK = '*',
		PLUS = '+',
		COMMA = ',',
		MINUS = '-',
		PERIOD = '.',
		SLASH = '/',
		NUMBER_0 = '0',
		NUMBER_1 = '1',
		NUMBER_2 = '2',
		NUMBER_3 = '3',
		NUMBER_4 = '4',
		NUMBER_5 = '5',
		NUMBER_6 = '6',
		NUMBER_7 = '7',
		NUMBER_8 = '8',
		NUMBER_9 = '9',
		COLON = ':',
		SEMI_COLON = ';',
		LESS = '<',
		EQUALS = '=',
		GREATER = '>',
		QUESTION_MARK = '?',
		AT = '@',
		LEFT_BRACKET = '[',
		BACKSLASH = '\\',
		RIGHT_BRACKET = ']',
		CARET = '^',
		UNDERSCORE = '_',
		BACKQUOTE = '`',
		A = 'a',
		B = 'b',
		C = 'c',
		D = 'd',
		E = 'e',
		F = 'f',
		G = 'g',
		H = 'h',
		I = 'i',
		J = 'j',
		K = 'k',
		L = 'l',
		M = 'm',
		N = 'n',
		O = 'o',
		P = 'p',
		Q = 'q',
		R = 'r',
		S = 's',
		T = 't',
		U = 'u',
		V = 'v',
		W = 'w',
		X = 'x',
		Y = 'y',
		Z = 'z',
		DELETE = '\x7F',

		CAPS_LOCK,
		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		F11,
		F12,
		PRINT_SCREEN,
		SCROLL_LOCK,
		PAUSE,
		INSERT,
		HOME,
		PAGE_UP,
		END,
		PAGE_DOWN,
		RIGHT,
		LEFT,
		DOWN,
		UP,
		NUM_LOCK_CLEAR,
		KEY_PAD_DIVIDE,
		KEY_PAD_MULTIPLY,
		KEY_PAD_MINUS,
		KEY_PAD_PLUS,
		KEY_PAD_ENTER,
		KEY_PAD_NUMBER_1,
		KEY_PAD_NUMBER_2,
		KEY_PAD_NUMBER_3,
		KEY_PAD_NUMBER_4,
		KEY_PAD_NUMBER_5,
		KEY_PAD_NUMBER_6,
		KEY_PAD_NUMBER_7,
		KEY_PAD_NUMBER_8,
		KEY_PAD_NUMBER_9,
		KEY_PAD_NUMBER_0,
		KEY_PAD_PERIOD,
		APPLICATION,
		POWER,
		KEY_PAD_EQUALS,
		F13,
		F14,
		F15,
		F16,
		F17,
		F18,
		F19,
		F20,
		F21,
		F22,
		F23,
		F24,
		EXECUTE,
		HELP,
		MENU,
		SELECT,
		STOP,
		AGAIN,
		UNDO,
		CUT,
		COPY,
		PASTE,
		FIND,
		MUTE,
		VOLUME_UP,
		VOLUME_DOWN,
		KEY_PAD_COMMA,
		KEY_PAD_EQUALS_AS_400,
		ALTER_ASE,
		SYSTEM_REQUEST,
		CANCEL,
		CLEAR,
		PRIOR,
		RETURN_2,
		SEPARATOR,
		OUT,
		OPER,
		CLEAR_AGAIN,
		CR_SEL,
		EX_SEL,
		KEY_PAD_NUMBER_00,
		KEY_PAD_NUMBER_000,
		THOUSANDS_SEPARATOR,
		DECIMAL_SEPARATOR,
		CURRENCY_UNIT,
		CURRENCY_SUB_UNIT,
		KEY_PAD_LEFT_PARENTHESIS,
		KEY_PAD_RIGHT_PARENTHESIS,
		KEY_PAD_LEFT_BRACE,
		KEY_PAD_RIGHT_BRACE,
		KEY_PAD_TAB,
		KEY_PAD_BACKSPACE,
		KEY_PAD_A,
		KEY_PAD_B,
		KEY_PAD_C,
		KEY_PAD_D,
		KEY_PAD_E,
		KEY_PAD_F,
		KEY_PAD_XOR,
		KEY_PAD_POWER,
		KEY_PAD_PERCENT,
		KEY_PAD_LESS,
		KEY_PAD_GREATER,
		KEY_PAD_AMPERSAND,
		KEY_PAD_DOUBLE_AMPERSAND,
		KEY_PAD_VERTICALBAR,
		KEY_PAD_DOUBLEB_VERTICAL_BAR,
		KEY_PAD_COLON,
		KEY_PAD_HASH,
		KEY_PAD_SPACE,
		KEY_PAD_AT,
		KEY_PAD_EXCLAMATION_MARK,
		KEY_PAD_MEMORY_STORE,
		KEY_PAD_MEMORY_RECALL,
		KEY_PAD_MEMORY_CLEAR,
		KEY_PAD_MEMORY_ADD,
		KEY_PAD_MEMORY_SUBTRACT,
		KEY_PAD_MEMORY_MULTIPLY,
		KEY_PAD_MEMORY_DIVIDE,
		KEY_PAD_PLUS_MINUS,
		KEY_PAD_CLEAR,
		KEY_PAD_CLEAR_ENTRY,
		KEY_PAD_BINARY,
		KEY_PAD_OCTAL,
		KEY_PAD_DECIMAL,
		KEY_PAD_HEXADECIMAL,
		LEFT_CTRL,
		LEFT_SHIFT,
		LEFT_ALT,
		LEFT_GUI,
		RIGHT_CTRL,
		RIGHT_SHIFT,
		RIGHT_ALT,
		RIGHT_GUI,
		MODE,
		AUDIO_NEXT,
		AUDIO_PREV,
		AUDIO_STOP,
		AUDIO_PLAY,
		AUDIO_MUTE,
		MEDIA_SELECT,
		WEB,
		MAIL,
		CALCULATOR,
		COMPUTER,
		AC_SEARCH,
		AC_HOME,
		AC_BACK,
		AC_FORWARD,
		AC_STOP,
		AC_REFRESH,
		AC_BOOKMARKS,
		BRIGHTNESS_DOWN,
		BRIGHTNESS_UP,
		DISPLAY_SWITCH,
		KEYBOARD_ILLUMINATION_TOGGLE,
		KEYBOARD_ILLUMINATION_DOWN,
		KEYBOARD_ILLUMINATION_UP,
		EJECT,
		SLEEP,
		APP_1,
		APP_2,
		AUDIO_REWIND,
		AUDIO_FAST_FORWARD,
		SOFT_LEFT,
		SOFT_RIGHT,
		CALL,
		END_CALL
	};

	enum class GamepadButton
	{
		UNKNOWN,

		B,
		X,
		Y,
		A,
		BACK,
		GUIDE,
		START,
		RIGHT_STICK,
		LEFT_STICK,
		RIGHT_SHOULDER,
		LEFT_SHOULDER,
		RIGHT,
		LEFT,
		UP,
		DOWN,
		MISCELLANEOUS,
		PADDLE_1,
		PADDLE_2,
		PADDLE_3,
		PADDLE_4,
		TOUCHPAD
	};

	enum class GamepadAxis
	{
		UNKNOWN,

		LEFT_STICK_RIGHT,
		LEFT_STICK_LEFT,
		LEFT_STICK_UP,
		LEFT_STICK_DOWN,
		RIGHT_STICK_RIGHT,
		RIGHT_STICK_LEFT,
		RIGHT_STICK_UP,
		RIGHT_STICK_DOWN,
		RIGHT_TRIGGER,
		LEFT_TRIGGER
	};

	using GamepadButtonInput = std::pair<std::int32_t, GamepadButton>;
	using GamepadAxisInput = std::pair<std::int32_t, GamepadAxis>;

	using Input = std::variant<
		MouseButton,
		Key,
		GamepadButtonInput,
		GamepadAxisInput>;
}

#endif